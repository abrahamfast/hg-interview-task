# 📝 Interview Task – Fullstack (Laravel + Vue.js)

سلام 👋  
این ریپو شامل تمرین مرحله دوم مصاحبه شما با **HamrahGold** است.  
هدف ما بررسی توانایی شما در **حل مسئله، طراحی سیستم و کدنویسی عملی** در حوزه طلا و صرافی است.  

لطفاً تسک‌ها را مرحله به مرحله انجام دهید.  
- ⏱ زمان تقریبی: ۲۴ ساعت  
- 🛠 استفاده از دامی دیتا آزاد است  
- 📌 می‌توانید از Laravel, Vue 3, MySQL/SQLite و Redis (اختیاری) استفاده کنید  

---

## 🔹 بخش ۱ – طراحی API خرید طلا (Laravel)

### سناریو
کاربر می‌خواهد ۲ گرم طلا بخرد.  
- قیمت لحظه‌ای طلا هر ۵ ثانیه آپدیت می‌شود.  
- پس از خرید موفق، مقدار طلا به **wallet** کاربر اضافه می‌شود.  

### وظایف
- یک جدول ساده `transactions` طراحی کنید با فیلدهای:  
  ```sql
  id, user_id, type (Buy/Sell), weight, price, fee, created_at
````

* یک API بنویسید:

  ```
  POST /api/buy
  ```

  ورودی:

  ```json
  { "user_id": 1, "weight": 2 }
  ```

  خروجی: تاییدیه خرید + موجودی جدید کاربر

* تراکنش باید **atomic** باشد (در صورت خطا rollback).

* قیمت از یک دامی دیتا (جدول `prices`) گرفته شود.

### دامی دیتا نمونه

```sql
INSERT INTO prices (id, symbol, price, created_at) 
VALUES (1, 'XAU-gram', 9500000, NOW());
```

---

## 🔹 بخش ۲ – نمایش فرانت‌اند (Vue 3)

### سناریو

می‌خواهیم لیست تراکنش‌های کاربر را نمایش دهیم.

### وظایف

* یک صفحه Vue بسازید که از API زیر استفاده کند:

  ```
  GET /api/transactions?user_id=1
  ```

* لیست تراکنش‌ها را در یک جدول نمایش دهید:

  * نوع تراکنش (خرید/فروش)
  * وزن
  * قیمت
  * تاریخ

* هر **۱۰ ثانیه** یک بار جدول رفرش شود.

---

## 🔹 بخش ۳ – الگوریتم و حل مسئله

### ۱. محاسبه موجودی طلا

تابعی بنویسید که موجودی طلای یک کاربر را بر اساس تراکنش‌هایش محاسبه کند.

ورودی:

```json
[
  { "type": "Buy", "weight": 2 },
  { "type": "Buy", "weight": 1 },
  { "type": "Sell", "weight": 0.5 }
]
```

خروجی مورد انتظار:

```json
2.5
```

---

### ۲. محاسبه سود و زیان

اگر نرخ کارمزد خرید **۰.۵٪** و فروش **۱٪** باشد:

* تابعی بنویسید که سود/زیان کاربر را محاسبه کند.

📌 دامی دیتا:

* خرید ۲ گرم با قیمت ۹,۵۰۰,۰۰۰ تومان
* فروش ۱ گرم با قیمت ۹,۷۰۰,۰۰۰ تومان

انتظار: محاسبه سود خالص پس از کسر کارمزدها.

---

### ۳. Order Matching ساده (چالش سخت‌تر)

سیستمی بنویسید که سفارش‌های خرید و فروش را مچ کند:

ورودی:

```json
{
  "buyOrders": [
    { "id": 1, "price": 9500000, "weight": 2 },
    { "id": 2, "price": 9400000, "weight": 1 }
  ],
  "sellOrders": [
    { "id": 3, "price": 9450000, "weight": 1 },
    { "id": 4, "price": 9600000, "weight": 2 }
  ]
}
```

انتظار:

* الگوریتم باید **اولویت با بهترین قیمت** داشته باشد.
* سفارش Buy با قیمت `9,500,000` باید با Sell به قیمت `9,450,000` مچ شود.
* خروجی: لیست مچ‌ها و سفارش‌های باقی‌مانده.

---

## 🔹 بخش ۴ – امنیت و خطاها

* مکانیزمی برای جلوگیری از ثبت دوباره یک تراکنش (Duplicate Request) پیشنهاد دهید.
* شماره شبا/کارت را چطور ذخیره می‌کنید تا هم امن باشد و هم در UI فقط بخشی نمایش داده شود؟

---

## 🔹 خروجی نهایی

* کد باید قابل اجرا باشد (حتی با دامی دیتا ساده).
* توضیحات مختصر در `README.md` بنویسید (نحوه اجرای پروژه + تست API).

---

